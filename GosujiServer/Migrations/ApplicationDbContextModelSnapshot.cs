// <auto-generated />
using System;
using GosujiServer.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GosujiServer.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.10");

            modelBuilder.Entity("GosujiServer.Areas.Identity.Data.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("CreateDate")
                        .HasColumnType("TEXT");

                    b.Property<long?>("CurrentSubscriptionId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("EmailConfirmedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsBanned")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset?>("ModifyDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<long?>("SettingConfigId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("SettingConfigId");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("GosujiServer.Areas.Identity.Data.UserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("CreateDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset?>("ModifyDate")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("GosujiServer.Data.Changelog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("CreateDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("Date")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset?>("ModifyDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Changelogs");
                });

            modelBuilder.Entity("GosujiServer.Data.Discount", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("CreateDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("ExpireDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset?>("ModifyDate")
                        .HasColumnType("TEXT");

                    b.Property<float>("Percent")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("Discounts");
                });

            modelBuilder.Entity("GosujiServer.Data.Feedback", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("CreateDate")
                        .HasColumnType("TEXT");

                    b.Property<long>("FeedbackTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset?>("ModifyDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Subject")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("FeedbackTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("GosujiServer.Data.FeedbackType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("CreateDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset?>("ModifyDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("FeedbackTypes");
                });

            modelBuilder.Entity("GosujiServer.Data.Game", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Boardsize")
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("ChosenNotPlayedCoords")
                        .HasColumnType("BLOB");

                    b.Property<int>("Color")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("CreateDate")
                        .HasColumnType("TEXT");

                    b.Property<long?>("EndgameStatId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("GameStatId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Handicap")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsFinished")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsThirdPartySGF")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("KataGoVersionId")
                        .HasColumnType("INTEGER");

                    b.Property<float>("Komi")
                        .HasColumnType("REAL");

                    b.Property<long?>("MidgameStatId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("ModifyDate")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("MoveTypes")
                        .HasColumnType("BLOB");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<long?>("OpeningStatId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PrevNodeX")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PrevNodeY")
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("Ratios")
                        .HasColumnType("BLOB");

                    b.Property<int?>("Result")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Ruleset")
                        .HasColumnType("TEXT");

                    b.Property<string>("SGF")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("Suggestions")
                        .HasColumnType("BLOB");

                    b.Property<string>("Thumbnail")
                        .HasColumnType("TEXT");

                    b.Property<long>("TrainerSettingConfigId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EndgameStatId");

                    b.HasIndex("GameStatId");

                    b.HasIndex("KataGoVersionId");

                    b.HasIndex("MidgameStatId");

                    b.HasIndex("OpeningStatId");

                    b.HasIndex("TrainerSettingConfigId");

                    b.HasIndex("UserId");

                    b.ToTable("Games");
                });

            modelBuilder.Entity("GosujiServer.Data.GameStat", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("CreateDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset?>("ModifyDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("MoveNumber")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Perfect")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PerfectStreak")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PerfectTopStreak")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Right")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RightStreak")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RightTopStreak")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Score")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Total")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Winrate")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("GameStats");
                });

            modelBuilder.Entity("GosujiServer.Data.KataGoVersion", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Config")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("CreateDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset?>("ModifyDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("KataGoVersions");
                });

            modelBuilder.Entity("GosujiServer.Data.Language", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("CreateDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Flag")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset?>("ModifyDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Short")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("GosujiServer.Data.Preset", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("CreateDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("ModifyDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long>("TrainerSettingConfigId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("TrainerSettingConfigId");

                    b.HasIndex("UserId");

                    b.ToTable("Presets");
                });

            modelBuilder.Entity("GosujiServer.Data.SettingConfig", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("CreateDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDarkMode")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsGetChangelogEmail")
                        .HasColumnType("INTEGER");

                    b.Property<float?>("KomiCN13")
                        .HasColumnType("REAL");

                    b.Property<float?>("KomiCN19")
                        .HasColumnType("REAL");

                    b.Property<float?>("KomiCN9")
                        .HasColumnType("REAL");

                    b.Property<float?>("KomiJP13")
                        .HasColumnType("REAL");

                    b.Property<float?>("KomiJP19")
                        .HasColumnType("REAL");

                    b.Property<float?>("KomiJP9")
                        .HasColumnType("REAL");

                    b.Property<DateTimeOffset?>("ModifyDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("Volume")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("SettingConfigs");
                });

            modelBuilder.Entity("GosujiServer.Data.SubscriptionType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("CreateDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset?>("ModifyDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("SubscriptionTypes");
                });

            modelBuilder.Entity("GosujiServer.Data.TextKey", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("CreateDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset?>("ModifyDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("TextKeys");
                });

            modelBuilder.Entity("GosujiServer.Data.TextValue", b =>
                {
                    b.Property<long>("LanguageId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("TextKeyId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("CreateDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset?>("ModifyDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LanguageId", "TextKeyId");

                    b.HasIndex("TextKeyId");

                    b.ToTable("TextValues");
                });

            modelBuilder.Entity("GosujiServer.Data.TrainerSettingConfig", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Boardsize")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ColorType")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CornerChance33")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CornerChance34")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CornerChance35")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CornerChance44")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CornerChance45")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("CornerSwitch33")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("CornerSwitch34")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("CornerSwitch35")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("CornerSwitch44")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("CornerSwitch45")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("CreateDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("DisableAICorrection")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ForceOpponentCorners")
                        .HasColumnType("TEXT");

                    b.Property<int>("Handicap")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Hash")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<float>("Komi")
                        .HasColumnType("REAL");

                    b.Property<string>("KomiChangeStyle")
                        .HasColumnType("TEXT");

                    b.Property<float>("MaxVisitDiffPerc")
                        .HasColumnType("REAL");

                    b.Property<bool>("MaxVisitDiffPercSwitch")
                        .HasColumnType("INTEGER");

                    b.Property<float>("MinVisitsPerc")
                        .HasColumnType("REAL");

                    b.Property<bool>("MinVisitsPercSwitch")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("ModifyDate")
                        .HasColumnType("TEXT");

                    b.Property<float>("OpponentOptionPerc")
                        .HasColumnType("REAL");

                    b.Property<int>("OpponentOptions")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("OpponentOptionsSwitch")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OpponentVisits")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PreMoves")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("PreMovesSwitch")
                        .HasColumnType("INTEGER");

                    b.Property<float>("PreOptionPerc")
                        .HasColumnType("REAL");

                    b.Property<int>("PreOptions")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PreVisits")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Ruleset")
                        .HasColumnType("TEXT");

                    b.Property<int>("SelfplayVisits")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ShowOpponentOptions")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ShowOptions")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ShowWeakerOptions")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SuggestionOptions")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SuggestionVisits")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("TrainerSettingConfigs");
                });

            modelBuilder.Entity("GosujiServer.Data.UserActivity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("CreateDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset?>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset?>("ModifyDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserActivities", (string)null);
                });

            modelBuilder.Entity("GosujiServer.Data.UserMoveCount", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("CreateDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset?>("ModifyDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("Moves")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Visits")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserMoveCounts");
                });

            modelBuilder.Entity("GosujiServer.Data.UserSubscription", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("CreateDate")
                        .HasColumnType("TEXT");

                    b.Property<long?>("DiscountId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("ModifyDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("Months")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("StartDate")
                        .HasColumnType("TEXT");

                    b.Property<long>("SubscriptionTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DiscountId");

                    b.HasIndex("SubscriptionTypeId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserSubscriptions");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("GosujiServer.Areas.Identity.Data.User", b =>
                {
                    b.HasOne("GosujiServer.Data.SettingConfig", "SettingConfig")
                        .WithMany()
                        .HasForeignKey("SettingConfigId");

                    b.Navigation("SettingConfig");
                });

            modelBuilder.Entity("GosujiServer.Areas.Identity.Data.UserRole", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GosujiServer.Areas.Identity.Data.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GosujiServer.Data.Feedback", b =>
                {
                    b.HasOne("GosujiServer.Data.FeedbackType", "FeedbackType")
                        .WithMany()
                        .HasForeignKey("FeedbackTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GosujiServer.Areas.Identity.Data.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FeedbackType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GosujiServer.Data.Game", b =>
                {
                    b.HasOne("GosujiServer.Data.GameStat", "EndgameStat")
                        .WithMany()
                        .HasForeignKey("EndgameStatId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("GosujiServer.Data.GameStat", "GameStat")
                        .WithMany()
                        .HasForeignKey("GameStatId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("GosujiServer.Data.KataGoVersion", "kataGoVersion")
                        .WithMany()
                        .HasForeignKey("KataGoVersionId");

                    b.HasOne("GosujiServer.Data.GameStat", "MidgameStat")
                        .WithMany()
                        .HasForeignKey("MidgameStatId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("GosujiServer.Data.GameStat", "OpeningStat")
                        .WithMany()
                        .HasForeignKey("OpeningStatId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("GosujiServer.Data.TrainerSettingConfig", "TrainerSettingConfig")
                        .WithMany()
                        .HasForeignKey("TrainerSettingConfigId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GosujiServer.Areas.Identity.Data.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EndgameStat");

                    b.Navigation("GameStat");

                    b.Navigation("MidgameStat");

                    b.Navigation("OpeningStat");

                    b.Navigation("TrainerSettingConfig");

                    b.Navigation("User");

                    b.Navigation("kataGoVersion");
                });

            modelBuilder.Entity("GosujiServer.Data.Preset", b =>
                {
                    b.HasOne("GosujiServer.Data.TrainerSettingConfig", "TrainerSettingConfig")
                        .WithMany()
                        .HasForeignKey("TrainerSettingConfigId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GosujiServer.Areas.Identity.Data.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TrainerSettingConfig");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GosujiServer.Data.TextValue", b =>
                {
                    b.HasOne("GosujiServer.Data.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GosujiServer.Data.TextKey", "TextKey")
                        .WithMany()
                        .HasForeignKey("TextKeyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("TextKey");
                });

            modelBuilder.Entity("GosujiServer.Data.UserActivity", b =>
                {
                    b.HasOne("GosujiServer.Areas.Identity.Data.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("GosujiServer.Data.UserMoveCount", b =>
                {
                    b.HasOne("GosujiServer.Areas.Identity.Data.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("GosujiServer.Data.UserSubscription", b =>
                {
                    b.HasOne("GosujiServer.Data.Discount", "Discount")
                        .WithMany()
                        .HasForeignKey("DiscountId");

                    b.HasOne("GosujiServer.Data.SubscriptionType", "SubscriptionType")
                        .WithMany()
                        .HasForeignKey("SubscriptionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GosujiServer.Areas.Identity.Data.User", "User")
                        .WithOne("CurrentSubscription")
                        .HasForeignKey("GosujiServer.Data.UserSubscription", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Discount");

                    b.Navigation("SubscriptionType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("GosujiServer.Areas.Identity.Data.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("GosujiServer.Areas.Identity.Data.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("GosujiServer.Areas.Identity.Data.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GosujiServer.Areas.Identity.Data.User", b =>
                {
                    b.Navigation("CurrentSubscription");
                });
#pragma warning restore 612, 618
        }
    }
}
