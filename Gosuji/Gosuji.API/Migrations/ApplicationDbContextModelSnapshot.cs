// <auto-generated />
using System;
using Gosuji.API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Gosuji.API.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.7");

            modelBuilder.Entity("Gosuji.API.Data.PendingUserChange", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("CreateDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("ModifyDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserName")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("PendingUserChanges");
                });

            modelBuilder.Entity("Gosuji.API.Data.RateLimitViolation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("CreateDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Endpoint")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("TEXT");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("TEXT");

                    b.Property<int>("Method")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("ModifyDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("RateLimitViolations");
                });

            modelBuilder.Entity("Gosuji.API.Data.RefreshToken", b =>
                {
                    b.Property<string>("Token")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("CreateDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("ExpireDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("ModifyDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Token");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("Gosuji.API.Data.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("BackupCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("CreateDate")
                        .HasColumnType("TEXT");

                    b.Property<long?>("CurrentSubscriptionId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("EmailConfirmedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsBanned")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("ModifyDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CurrentSubscriptionId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Gosuji.API.Data.UserActivity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("CreateDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset?>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("ModifyDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .HasMaxLength(36)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserActivities");
                });

            modelBuilder.Entity("Gosuji.API.Data.UserMoveCount", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("CreateDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("KataGoVisits")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("ModifyDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("Moves")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserMoveCounts");
                });

            modelBuilder.Entity("Gosuji.API.Data.UserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("CreateDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("ModifyDate")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Gosuji.Client.Data.Changelog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("CreateDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("Date")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(2500)
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("ModifyDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("TEXT");

                    b.Property<string>("Version")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Changelogs");
                });

            modelBuilder.Entity("Gosuji.Client.Data.Discount", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Code")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("CreateDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset?>("ExpireDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("ModifyDate")
                        .HasColumnType("TEXT");

                    b.Property<double>("Percent")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("Discounts");
                });

            modelBuilder.Entity("Gosuji.Client.Data.EncodedGameData", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(12)
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("CreateDate")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("Data")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<DateTimeOffset>("ModifyDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("EncodedGameDatas");
                });

            modelBuilder.Entity("Gosuji.Client.Data.Feedback", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("CreateDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("FeedbackType")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsRead")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsResolved")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Message")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("ModifyDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .HasMaxLength(36)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("Gosuji.Client.Data.Game", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(12)
                        .HasColumnType("TEXT");

                    b.Property<int>("Color")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("CreateDate")
                        .HasColumnType("TEXT");

                    b.Property<long?>("EndgameStatId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("GameStatId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsThirdPartySGF")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("KataGoVersionId")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Komi")
                        .HasColumnType("REAL");

                    b.Property<long?>("MidgameStatId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("ModifyDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long?>("OpeningStatId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PerfectStreak")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PerfectTopStreak")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ProductVersion")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double?>("Result")
                        .HasColumnType("REAL");

                    b.Property<int>("RightStreak")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RightTopStreak")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Ruleset")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("ShouldIgnoreStats")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("TrainerSettingConfigId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserId")
                        .HasMaxLength(36)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EndgameStatId");

                    b.HasIndex("GameStatId");

                    b.HasIndex("KataGoVersionId");

                    b.HasIndex("MidgameStatId");

                    b.HasIndex("OpeningStatId");

                    b.HasIndex("TrainerSettingConfigId");

                    b.ToTable("Games");
                });

            modelBuilder.Entity("Gosuji.Client.Data.GameStat", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("CreateDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("From")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("ModifyDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("Perfect")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Right")
                        .HasColumnType("INTEGER");

                    b.Property<int>("To")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Total")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("GameStats");
                });

            modelBuilder.Entity("Gosuji.Client.Data.KataGoVersion", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Config")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("CreateDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("ModifyDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("KataGoVersions");
                });

            modelBuilder.Entity("Gosuji.Client.Data.Language", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(15)
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("CreateDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("ModifyDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("Gosuji.Client.Data.Preset", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("CreateDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("ModifyDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(22)
                        .HasColumnType("TEXT");

                    b.Property<int?>("Order")
                        .HasColumnType("INTEGER");

                    b.Property<long>("TrainerSettingConfigId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserId")
                        .HasMaxLength(36)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("TrainerSettingConfigId");

                    b.HasIndex("UserId");

                    b.ToTable("Presets");
                });

            modelBuilder.Entity("Gosuji.Client.Data.SettingConfig", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("CreateDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsGetChangelogEmail")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsPreMoveStoneSound")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsSelfplayStoneSound")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LanguageId")
                        .HasColumnType("TEXT");

                    b.Property<int>("MasterVolume")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("ModifyDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("StoneVolume")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Theme")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.ToTable("SettingConfigs");
                });

            modelBuilder.Entity("Gosuji.Client.Data.Subscription", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("CreateDate")
                        .HasColumnType("TEXT");

                    b.Property<long?>("DiscountId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("ModifyDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("Months")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SubscriptionType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DiscountId");

                    b.HasIndex("UserId");

                    b.ToTable("Subscriptions");
                });

            modelBuilder.Entity("Gosuji.Client.Data.TrainerSettingConfig", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Boardsize")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ColorType")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CornerChance33")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CornerChance34")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CornerChance35")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CornerChance44")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CornerChance45")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("CornerSwitch33")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("CornerSwitch34")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("CornerSwitch35")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("CornerSwitch44")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("CornerSwitch45")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("CreateDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("ForceOpponentCorners")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Handicap")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Hash")
                        .HasMaxLength(150)
                        .HasColumnType("TEXT");

                    b.Property<int>("HideOpponentOptions")
                        .HasColumnType("INTEGER");

                    b.Property<int>("HideOptions")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("HideWeakerOptions")
                        .HasColumnType("INTEGER");

                    b.Property<double?>("Komi")
                        .HasColumnType("REAL");

                    b.Property<double>("MaxVisitDiffPerc")
                        .HasColumnType("REAL");

                    b.Property<bool>("MaxVisitDiffPercSwitch")
                        .HasColumnType("INTEGER");

                    b.Property<double>("MinVisitsPerc")
                        .HasColumnType("REAL");

                    b.Property<bool>("MinVisitsPercSwitch")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("ModifyDate")
                        .HasColumnType("TEXT");

                    b.Property<double>("OpponentOptionPerc")
                        .HasColumnType("REAL");

                    b.Property<bool>("OpponentOptionPercSwitch")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OpponentOptions")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("OpponentVisits")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PreMoves")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("PreMovesSwitch")
                        .HasColumnType("INTEGER");

                    b.Property<double>("PreOptionPerc")
                        .HasColumnType("REAL");

                    b.Property<bool>("PreOptionPercSwitch")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PreOptions")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("PreVisits")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Ruleset")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<double>("SelfplayPlaySpeed")
                        .HasColumnType("REAL");

                    b.Property<int?>("SelfplayVisits")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SuggestionOptions")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("SuggestionVisits")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("WrongMoveCorrection")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("TrainerSettingConfigs");
                });

            modelBuilder.Entity("Gosuji.Client.Data.UserState", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("CreateDate")
                        .HasColumnType("TEXT");

                    b.Property<long?>("LastPresetId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("ModifyDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("LastPresetId");

                    b.ToTable("UserStates");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Gosuji.API.Data.PendingUserChange", b =>
                {
                    b.HasOne("Gosuji.API.Data.User", "User")
                        .WithOne()
                        .HasForeignKey("Gosuji.API.Data.PendingUserChange", "Id")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Gosuji.API.Data.RefreshToken", b =>
                {
                    b.HasOne("Gosuji.API.Data.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();
                });

            modelBuilder.Entity("Gosuji.API.Data.User", b =>
                {
                    b.HasOne("Gosuji.Client.Data.Subscription", "CurrentSubscription")
                        .WithMany()
                        .HasForeignKey("CurrentSubscriptionId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("CurrentSubscription");
                });

            modelBuilder.Entity("Gosuji.API.Data.UserActivity", b =>
                {
                    b.HasOne("Gosuji.API.Data.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("User");
                });

            modelBuilder.Entity("Gosuji.API.Data.UserMoveCount", b =>
                {
                    b.HasOne("Gosuji.API.Data.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Gosuji.API.Data.UserRole", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Gosuji.API.Data.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Gosuji.Client.Data.EncodedGameData", b =>
                {
                    b.HasOne("Gosuji.Client.Data.Game", null)
                        .WithOne("EncodedGameData")
                        .HasForeignKey("Gosuji.Client.Data.EncodedGameData", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Gosuji.Client.Data.Feedback", b =>
                {
                    b.HasOne("Gosuji.API.Data.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("Gosuji.Client.Data.Game", b =>
                {
                    b.HasOne("Gosuji.Client.Data.GameStat", "EndgameStat")
                        .WithMany()
                        .HasForeignKey("EndgameStatId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Gosuji.Client.Data.GameStat", "GameStat")
                        .WithMany()
                        .HasForeignKey("GameStatId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Gosuji.Client.Data.KataGoVersion", "KataGoVersion")
                        .WithMany()
                        .HasForeignKey("KataGoVersionId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Gosuji.Client.Data.GameStat", "MidgameStat")
                        .WithMany()
                        .HasForeignKey("MidgameStatId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Gosuji.Client.Data.GameStat", "OpeningStat")
                        .WithMany()
                        .HasForeignKey("OpeningStatId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Gosuji.Client.Data.TrainerSettingConfig", "TrainerSettingConfig")
                        .WithMany()
                        .HasForeignKey("TrainerSettingConfigId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("EndgameStat");

                    b.Navigation("GameStat");

                    b.Navigation("KataGoVersion");

                    b.Navigation("MidgameStat");

                    b.Navigation("OpeningStat");

                    b.Navigation("TrainerSettingConfig");
                });

            modelBuilder.Entity("Gosuji.Client.Data.Preset", b =>
                {
                    b.HasOne("Gosuji.Client.Data.TrainerSettingConfig", "TrainerSettingConfig")
                        .WithMany()
                        .HasForeignKey("TrainerSettingConfigId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("Gosuji.API.Data.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("TrainerSettingConfig");
                });

            modelBuilder.Entity("Gosuji.Client.Data.SettingConfig", b =>
                {
                    b.HasOne("Gosuji.Client.Data.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Language");
                });

            modelBuilder.Entity("Gosuji.Client.Data.Subscription", b =>
                {
                    b.HasOne("Gosuji.Client.Data.Discount", "Discount")
                        .WithMany()
                        .HasForeignKey("DiscountId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Gosuji.API.Data.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("Discount");
                });

            modelBuilder.Entity("Gosuji.Client.Data.UserState", b =>
                {
                    b.HasOne("Gosuji.API.Data.User", null)
                        .WithOne()
                        .HasForeignKey("Gosuji.Client.Data.UserState", "Id")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("Gosuji.Client.Data.Preset", "LastPreset")
                        .WithMany()
                        .HasForeignKey("LastPresetId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("LastPreset");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Gosuji.API.Data.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Gosuji.API.Data.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Gosuji.API.Data.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Gosuji.Client.Data.Game", b =>
                {
                    b.Navigation("EncodedGameData");
                });
#pragma warning restore 612, 618
        }
    }
}
