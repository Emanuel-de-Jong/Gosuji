@using Gosuji.Client.Helpers.HttpResponseHandler
@using Gosuji.Client.Resources.Translations

@inject IStringLocalizer<APIResponses> tlAPI
@inject IJSRuntime js

@if (Show)
{
    <div class="alert alert-@(isSuccess ? "success" : "danger")" role="alert">
        @if (isUnauthorized)
        {
            <span>Access denied. Please <a href="login" class="alert-link">Log in</a>.</span>
        }
        else if (isError)
        {
            <span>Something went wrong. Please contact us with this message: </span>
            <b>@message</b>
            <button type="button" class="btn btn-sm btn-warning" @onclick=ErrorToClipboard><i class="fa-regular fa-copy"></i></button>
            <p>Send us an email at <a href="mailto:someone@example.com" class="alert-link">someone@example.com</a>.</p>
        }
        else
        {
            @message
        }
    </div>
}

@code {
    public bool Show
    {
        get
        {
            return show;
        }
        set
        {
            bool oldValue = show;
            show = value;
            if (oldValue != show)
            {
                StateHasChanged();
            }
        }
    }

    private bool show;

    private bool isSuccess;
    private string? message;

    private bool isUnauthorized;
    private bool isError;

    protected override async Task OnInitializedAsync()
    {
        Reset();
    }

    private void Reset()
    {
        Show = false;

        isSuccess = true;
        message = null;

        isUnauthorized = false;
        isError = false;
    }

    public void SetMessage(string message, bool isSuccess = true)
    {
        Reset();

        this.message = message;
        this.isSuccess = isSuccess;
        Show = true;
    }

    public bool HandleAPIResponse(APIResponse response, bool isSuccess = false)
    {
        if (response.IsSuccess)
        {
            return false;
        }

        Reset();

        this.isSuccess = isSuccess;

        if (response.IsMessage)
        {
            message = tlAPI[response.Message];
        }
        else if (response.IsLimit)
        {
            message = "Something went wrong. Please try again later.";
        }
        else if (response.IsNotAuthenticated)
        {
            isUnauthorized = true;
        }
        else
        {
            isError = true;
            message = $"{(int)response.StatusCode} {response.Message}";
        }

        Show = true;
        return true;
    }

    private async Task ErrorToClipboard()
    {
        await js.InvokeVoidAsync("navigator.clipboard.writeText", message);
    }
}
