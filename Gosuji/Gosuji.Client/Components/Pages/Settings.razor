@page "/settings"

@using Gosuji.Client.Components.Shared;
@using Gosuji.Client.Models

@inherits CustomPage

@if (privacyInput != null)
{
    <div id="settingsPage">
        <div class="container">
            <div class="d-flex align-items-start">
                <div class="nav flex-column nav-pills me-3">
                    <button type="button" class="nav-link active" data-bs-toggle="pill" data-bs-target="#v-pills-general">General</button>
                    <button type="button" class="nav-link" data-bs-toggle="pill" data-bs-target="#v-pills-subscription">Subscription</button>
                    <button type="button" class="nav-link" data-bs-toggle="pill" data-bs-target="#v-pills-privacy">Security</button>
                </div>
                <div class="tab-content">
                    <div class="tab-pane show active" id="v-pills-general">
                        @if (settingConfigService.SettingConfig != null)
                        {
                            <h3>Theme</h3>
                            <div class="mb-3">
                                <div class="form-check form-switch">
                                    <input class="form-check-input" type="checkbox" id="darkThemeSwitch" checked="@(settingConfigService.SettingConfig.Theme == EThemeType.DARK)" @onchange="settingConfigService.ChangeIsDarkMode">
                                    <label class="form-check-label text-body-emphasis" for="darkThemeSwitch">Dark theme</label>
                                </div>
                            </div>
                            
                            <hr />
                            <h3>Sound</h3>
                            <div class="mb-3">
                                <label for="masterVolumeRange" class="form-label">Master Volume</label>
                                <input type="range" class="form-range" id="masterVolumeRange" max="100" value="@settingConfigService.SettingConfig.MasterVolume" @onchange="settingConfigService.ChangeMasterVolume">
                            </div>
                            <div class="mb-3">
                                <label for="stoneVolumeRange" class="form-label">Stone Volume</label>
                                <input type="range" class="form-range" id="stoneVolumeRange" max="100" value="@settingConfigService.SettingConfig.StoneVolume" @onchange="settingConfigService.ChangeStoneVolume">
                            </div>
                            <div class="mb-3">
                                <div class="form-check form-switch">
                                    <input class="form-check-input" type="checkbox" id="isPreMoveStoneSoundSwitch" checked="@(settingConfigService.SettingConfig.IsPreMoveStoneSound)" @onchange="settingConfigService.ChangeIsPreMoveStoneSound">
                                    <label class="form-check-label" for="isPreMoveStoneSoundSwitch">Stone sounds on trainer pre moves</label>
                                </div>
                            </div>
                            <div class="mb-3">
                                <div class="form-check form-switch">
                                    <input class="form-check-input" type="checkbox" id="IsSelfplayStoneSoundSwitch" checked="@(settingConfigService.SettingConfig.IsSelfplayStoneSound)" @onchange="settingConfigService.ChangeIsSelfplayStoneSound">
                                    <label class="form-check-label" for="IsSelfplayStoneSoundSwitch">Stone sounds on trainer selfplay moves</label>
                                </div>
                            </div>
                        }
                    </div>

                    <div class="tab-pane" id="v-pills-subscription">
                        <table class="table">
                            <tbody>
                                <tr>
                                    <th>Subscription</th>
                                    <td>@(subscription != null ? subscription.SubscriptionType : "Free")</td>
                                </tr>
                                <tr>
                                    <th>Discount</th>
                                    <td>@(subscription?.Discount != null ? subscription.Discount.Percent + "%" : "None")</td>
                                </tr>
                                <tr>
                                    <th>End date (next billing)</th>
                                    <td>@(subscription != null ? subscription.EndDate : "Unlimited")</td>
                                </tr>
                            </tbody>
                        </table>

                        <a class="btn btn-secondary" href="subscriptions">Upgrade</a>
                        <button type="button" class="btn btn-secondary">Cancel</button>
                    </div>

                    <div class="tab-pane" id="v-pills-privacy">
                        <CStatusMessage @ref=privacyStatusMessage />

                        <h3>Information</h3>
                        <EditForm Model="privacyInput" FormName="privacy" OnValidSubmit="UpdatePrivacy" method="post">
                            <DataAnnotationsValidator />

                            <div class="form-floating mb-3">
                                <InputText @bind-Value="privacyInput.UserName" class="form-control" placeholder="User" id="privacyUserName" />
                                <label for="privacyUserName">Username</label>
                                <ValidationMessage For="() => privacyInput.UserName" class="text-danger" />
                            </div>
                            <div class="form-floating mb-3">
                                <InputText @bind-Value="privacyInput.Email" class="form-control" placeholder="name@example.com" id="privacyEmail" />
                                <label for="privacyEmail">Email</label>
                                <ValidationMessage For="() => privacyInput.Email" class="text-danger" />
                            </div>
                            <div class="form-floating mb-3">
                                <InputText type="password" @bind-Value="privacyInput.NewPassword" class="form-control" placeholder="password" id="privacyNewPassword" />
                                <label for="privacyNewPassword">New password</label>
                                <ValidationMessage For="() => privacyInput.NewPassword" class="text-danger" />
                            </div>
                            <div class="form-floating mb-4">
                                <InputText type="password" @bind-Value="privacyInput.ConfirmNewPassword" class="form-control" placeholder="password" id="privacyConfirmPassword" />
                                <label for="privacyConfirmPassword">Confirm new password</label>
                                <ValidationMessage For="() => privacyInput.ConfirmNewPassword" class="text-danger" />
                            </div>

                            <div class="form-floating mb-3">
                                <InputText type="password" @bind-Value="privacyInput.CurrentPassword" class="form-control" placeholder="password" id="privacyCurrentPassword" />
                                <label for="privacyCurrentPassword">Current Password</label>
                                <ValidationMessage For="() => privacyInput.CurrentPassword" class="text-danger" />
                            </div>

                            <div>
                                <button type="submit" class="btn btn-lg btn-primary">Save</button>
                            </div>
                        </EditForm>

                        <a href="change-email">Can't access your email? Change it.</a>

                        @if (settingConfigService.SettingConfig != null)
                        {
                            <hr />
                            <h3>Notifications</h3>
                            <div class="mb-3">
                                <div class="form-check form-switch">
                                    <input class="form-check-input" type="checkbox" id="isGetChangelogEmailSwitch" checked="@(settingConfigService.SettingConfig.IsGetChangelogEmail)" @onchange="settingConfigService.ChangeIsGetChangelogEmail">
                                    <label class="form-check-label" for="isGetChangelogEmailSwitch">Receive changelog emails</label>
                                </div>
                            </div>
                        }

                        <hr />
                        <h3>Personal data</h3>
                        <div class="mb-3">
                            <button type="button" class="btn btn-primary" @onclick=DownloadPersonalData>Download</button>
                        </div>

                        <CStatusMessage @ref=deletePersonalDataStatusMessage />

                        <EditForm Model="deletePersonalDataInput" FormName="deletePersonalData" OnValidSubmit="DeletePersonalData" method="post">
                            <DataAnnotationsValidator />

                            <div class="mb-3 input-group">
                                <InputText type="password" @bind-Value="deletePersonalDataInput.Password" class="form-control" placeholder="password" />
                                <button type="submit" class="btn btn-danger">Delete</button>
                                <ValidationMessage For="() => deletePersonalDataInput.Password" class="text-danger" />
                            </div>
                        </EditForm>
                    </div>
                </div>
            </div>
        </div>
    </div>
}
