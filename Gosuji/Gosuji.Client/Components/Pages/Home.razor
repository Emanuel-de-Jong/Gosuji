@page "/"
@rendermode @(new InteractiveWebAssemblyRenderMode(prerender: false))

@using System.Security.Claims
@using Gosuji.Client.Data
@using Gosuji.Client.Services

@inject AuthenticationStateProvider authenticationStateProvider
@inject IDataService dataService
@inject NavigationManager navigationManager;

<PageTitle>Gosuji</PageTitle>

<div id="homePage">
    <div class="page-layout">
        <h1 class="header page-header">Gosuji</h1>

        <!-- Videos -->
        <div class="video-container">
            <iframe class="video trailer" width="320" height="180" src="https://www.youtube.com/embed/tgbNymZ7vqY?autoplay=0&mute=1"></iframe>
            <iframe class="video improvement" width="320" height="180" src="https://www.youtube.com/embed/tgbNymZ7vqY?autoplay=0&mute=1"></iframe>
            <iframe class="video guide" width="320" height="180" src="https://www.youtube.com/embed/tgbNymZ7vqY?autoplay=0&mute=1"></iframe>
        </div>

        <!-- Explanation and Description of the page -->
        <p class="description">
            Lorem ipsum.
        </p>

        <!-- Changelog -->
        <div class="changelog-container">
            <h2 class="header changelog-header">Changelog</h2>

            @if (changelogs != null)
            {
                @foreach (Changelog changelogEntry in changelogs)
                {
                    <h4 class="individual-header">@changelogEntry.Version @changelogEntry.Name</h4>
                    <p class="changelog">
                        @changelogEntry.Description
                    </p>
                }
            }
        </div>
    </div>
</div>

@code {
    private string? userId;
    private Changelog[]? changelogs;

    protected override async Task OnInitializedAsync()
    {
        // navigationManager.NavigateTo("cms/stats");
        // return;

        userId = (await authenticationStateProvider.GetAuthenticationStateAsync()).User.FindFirst(ClaimTypes.NameIdentifier)?.Value;

        changelogs = await dataService.GetChangelogs();
        changelogs.Reverse();
    }
}
