@page "/"

@using System.Security.Claims
@using Gosuji.Client.Data
@using Gosuji.Client.Services
@using Gosuji.Client.Resources.Translations

@inherits CustomPage

@inject AuthenticationStateProvider authenticationStateProvider
@inject DataAPI dataAPI
@inject NavigationManager navigationManager
@inject IStringLocalizer<General> tl

<PageTitle>Gosuji</PageTitle>

<div id="homePage">
    <div class="page-layout">
        <h1 class="pageTitle header page-header">Gosuji</h1>

        <!-- Videos -->
        <div class="video-container">
            @* <iframe class="video trailer" width="320" height="180" src="https://www.youtube.com/embed/tgbNymZ7vqY?autoplay=0&mute=1"></iframe>
            <iframe class="video improvement" width="320" height="180" src="https://www.youtube.com/embed/tgbNymZ7vqY?autoplay=0&mute=1"></iframe>
            <iframe class="video guide" width="320" height="180" src="https://www.youtube.com/embed/tgbNymZ7vqY?autoplay=0&mute=1"></iframe> *@
        </div>

        <!-- Explanation and Description of the page -->
        <p class="description">
            @tl[General.Home_Description]
        </p>

        <!-- Changelog -->
        @if (changelogs != null)
        {
            <div class="changelog-container">
                <h2 class="header changelog-header">Changelog</h2>

                @foreach (Changelog changelogEntry in changelogs)
                {
                    <h4 class="individual-header">@changelogEntry.Version @changelogEntry.Name</h4>
                    <p class="changelog">
                        @changelogEntry.Description
                    </p>
                }
            </div>
        }
    </div>
</div>

@code {
    private Changelog[]? changelogs;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        // navigationManager.NavigateTo("learn/trainer");
        // return;

        changelogs = await dataAPI.GetChangelogs();
        if (changelogs != null)
        {
            changelogs = changelogs.OrderByDescending(c => c.Date).ToArray();
        }
    }
}
